/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/lootlog/api/battle-records": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of battles
         * @description List of fights with participants, distribution of loots etc.
         */
        get: operations["getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            message?: string;
        };
        /** @description Allocation of loot - who got what item */
        AssignedItem: {
            /** @description Loot id in loot window. It's just the id in the window for assigning a specific item. */
            lootItemId?: string;
            /**
             * Format: int64
             * @description Base id of the item that can be found in the map editor
             */
            baseItemId?: number;
            /** @description Item name */
            baseItemName?: string;
            /** @description Id of items created in the bag. This is a list because when we get a consumable item, it can connect us with another existing item in the bag and add a second one if there is a maximum number of uses. */
            itemIds?: string[];
            /** @description Id of the hero who got the item */
            characterId?: string;
            /** @description Character name */
            characterName?: string;
        };
        BaseItemDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            src?: string;
            attributes?: components["schemas"]["ItemAttributes"];
            /** @enum {string} */
            category?: "oneHanded" | "armors" | "twoHanded" | "halfHanded" | "gloves" | "helmets" | "boots" | "rings" | "necklaces" | "shields" | "staffs" | "auxiliary" | "quests" | "consumable" | "neutrals" | "backpacks" | "wands" | "distances" | "arrows" | "talismans" | "upgrades" | "books" | "keys" | "golds";
            /** @enum {string} */
            currency?: "gold" | "unset";
            /** Format: int32 */
            price?: number;
            /** @enum {string} */
            rarity?: "common" | "unique" | "heroic" | "legendary" | "upgraded" | "artefact";
        };
        BattleRecordDTO: {
            id?: string;
            /** Format: date-time */
            createdAt?: string;
            characters?: components["schemas"]["CharacterLiteDTO"][];
            npcs?: components["schemas"]["NpcDTO"][];
            attackerId?: string;
            attackerType?: string;
            lootsAllocation?: components["schemas"]["LootsAllocationDTO"];
        };
        /** @description List of characters who got the loot window */
        CharacterLiteDTO: {
            id?: string;
            name?: string;
            src?: string;
            /** Format: int32 */
            lvl?: number;
            /** @enum {string} */
            profession?: "p" | "w" | "t" | "h" | "m" | "b";
        };
        ItemAttributes: {
            attributes?: {
                [key: string]: Record<string, never>;
            };
        };
        /** @description List of items in the loot window */
        LootItemDTO: {
            id?: string;
            item?: components["schemas"]["BaseItemDTO"];
            wantCharacterIds?: string[];
            dontCharacterIds?: string[];
            needCharacterIds?: string[];
        };
        LootsAllocationDTO: {
            /** @description List of characters who got the loot window */
            characters?: components["schemas"]["CharacterLiteDTO"][];
            /** @description List of items in the loot window */
            items?: components["schemas"]["LootItemDTO"][];
            /** @description Id of characters who confirmed the loot window before the time expired */
            confirmedCharacterIds?: string[];
            /** @description Allocation of loot - who got what item */
            assignedItems?: components["schemas"]["AssignedItem"][];
        } | null;
        NpcDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            mapId?: number;
            name?: string;
            src?: string;
            /** Format: int32 */
            x?: number;
            /** Format: int32 */
            y?: number;
            /** Format: int32 */
            lvl?: number;
            /** Format: int32 */
            type?: number;
            /** Format: int32 */
            wt?: number;
            /** @enum {string} */
            rank?: "NORMAL" | "ELITE" | "ELITE_II" | "ELITE_III" | "HERO" | "TITAN";
            /** @enum {string} */
            profession?: "p" | "w" | "t" | "h" | "m" | "b";
            /** Format: int32 */
            groupId?: number;
            inGroup?: boolean;
        };
        PageBattleRecordDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["BattleRecordDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            unpaged?: boolean;
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        SortObject: {
            empty?: boolean;
            unsorted?: boolean;
            sorted?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAll: {
        parameters: {
            query?: {
                npcName?: string;
                characterName?: string;
                minNpcLvl?: number;
                maxNpcLvl?: number;
                minCharacterLvl?: number;
                maxCharacterLvl?: number;
                /** @description Zero-based page index (0..N) */
                page?: number;
                /** @description The size of the page to be returned */
                size?: number;
                /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                sort?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageBattleRecordDTO"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
